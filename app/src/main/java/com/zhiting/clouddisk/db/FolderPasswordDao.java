package com.zhiting.clouddisk.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOLDER_PASSWORD".
*/
public class FolderPasswordDao extends AbstractDao<FolderPassword, Long> {

    public static final String TABLENAME = "FOLDER_PASSWORD";

    /**
     * Properties of entity FolderPassword.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property ScopeToken = new Property(4, String.class, "scopeToken", false, "SCOPE_TOKEN");
        public final static Property ModifyTime = new Property(5, Long.class, "modifyTime", false, "MODIFY_TIME");
    }


    public FolderPasswordDao(DaoConfig config) {
        super(config);
    }
    
    public FolderPasswordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOLDER_PASSWORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"PATH\" TEXT," + // 2: path
                "\"PASSWORD\" TEXT," + // 3: password
                "\"SCOPE_TOKEN\" TEXT," + // 4: scopeToken
                "\"MODIFY_TIME\" INTEGER);"); // 5: modifyTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOLDER_PASSWORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FolderPassword entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String scopeToken = entity.getScopeToken();
        if (scopeToken != null) {
            stmt.bindString(5, scopeToken);
        }
 
        Long modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindLong(6, modifyTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FolderPassword entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String scopeToken = entity.getScopeToken();
        if (scopeToken != null) {
            stmt.bindString(5, scopeToken);
        }
 
        Long modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindLong(6, modifyTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FolderPassword readEntity(Cursor cursor, int offset) {
        FolderPassword entity = new FolderPassword( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // scopeToken
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // modifyTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FolderPassword entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScopeToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModifyTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FolderPassword entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FolderPassword entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FolderPassword entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
